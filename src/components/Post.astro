---
import { getEntry } from 'astro:content'
import slugify from 'slugify'
import { render } from 'astro:content'

interface Props {
  postId: string
  brief?: boolean
  link?: boolean
}

const { postId, brief, link } = Astro.props

const post = await getEntry('posts', postId)
if (post === undefined) {
  throw new Error(`${postId} does not refer to an existing post`)
}

const { remarkPluginFrontmatter: fm, Content } = await render(post)
const { tags } = post.data
---

<article class="prose" transition:name={`post.${postId}`} transition:animate="initial">
  <hgroup style="margin: 0;">
    <h1 id="title">
      {link ? <a href={`/posts/${postId}`}>{fm.title}</a> : fm.title}
    </h1>

    {fm.tagline && <p>{fm.tagline}</p>}
  </hgroup>
  {
    (tags.length > 0 || fm.series) && (
      <>
        <div style="display: flex; flex-wrap: wrap;">
          {fm.series && (
            <a class="tag" href={`/posts?series=${slugify(fm.series)}`}>
              {fm.series}
            </a>
          )}
          {tags.length > 0 &&
            (tags as string[]).map((tag) => (
              <a class="tag" href={`/posts?tag=${tag}`}>
                {'#' + tag}
              </a>
            ))}
        </div>
        <div>
          {fm.revisions ? <small data-tooltip={fm.revisions}>{fm.published}</small> : <small>{fm.published}</small>}
          {' - '}
          <small data-tooltip={fm.wordCount + ' words'}>{fm.readingTime}</small>
        </div>
      </>
    )
  }
  <hr />
  {brief ? fm.brief : <Content />}
</article>
