---
import { getEntry } from 'astro:content'
import slugify from 'slugify'
import { render } from 'astro:content'
import Typography from './Typography.astro'

interface Props {
  postId: string
  card?: boolean
}

const { postId, card } = Astro.props

const post = await getEntry('posts', postId)
if (post === undefined) {
  throw new Error(`${postId} does not refer to an existing post`)
}

const { remarkPluginFrontmatter: fm, Content } = await render(post)
const { tags } = post.data
---

<article transition:name={`post.${postId}`} transition:animate="initial">
  <hgroup>
    {
      card ? (
        <h3>
          <a href={`/posts/${postId}`}>{fm.title}</a>
        </h3>
      ) : (
        <h1>{fm.title}</h1>
      )
    }

    {fm.tagline && <p>{fm.tagline}</p>}

    <small>
      {
        (tags.length > 0 || fm.series) && (
          <ul>
            <li>{fm.series && <a href={`/posts?series=${slugify(fm.series)}`}>{fm.series}</a>}</li>
            {tags.length > 0 &&
              (tags as string[]).map((tag) => (
                <li>
                  <a href={`/posts?tag=${tag}`}>{'#' + tag}</a>
                </li>
              ))}
          </ul>
        )
      }
      {fm.revisions ? fm.published : fm.published} - {fm.readingTime} - {fm.wordCount} words
    </small>
  </hgroup>
  <hr />

  <Typography>{card ? <p>{fm.brief}</p> : <Content />}</Typography>
</article>

<style>
  article {
    margin: 0;

    hgroup {
      margin-inline: 1rem;
      margin-block: 0;
    }

    ul {
      display: flex;
      flex-wrap: wrap;
      column-gap: 0.25rem;
      list-style: none;
      padding: 0;
      margin-block: 0;
    }

    hr {
      margin-block: 0.5rem;
      margin-inline: 1rem;
    }
  }
</style>
